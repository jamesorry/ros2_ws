from kalmanfilter import KalmanFilter
import cv2
from filterpy.kalman import kalman_filter
import time
# Kalman Filter
kf = KalmanFilter()

map_file_name = "origin_map_v2.png"
# map_file_name = "origin_map_v3.png"

if map_file_name == "origin_map_v2.png":
    # ! map is my_own_map_v2.pgm
    origin_position_x = -5.18
    origin_position_y = -5.53

elif map_file_name == "origin_map_v3.png":
    # ! map is my_own_map_v3.pgm
    origin_position_x = -8.8
    origin_position_y = -5.24

img = cv2.imread(map_file_name)
origin_height, origin_width, origin_channel = img.shape
map_resolution = 0.05
print("origin_height: ", origin_height)
print("origin_width: ", origin_width)
print("origin_channel: ", origin_channel)
print("origin_position_x: ", origin_position_x)
print("origin_position_y: ", origin_position_y)
fix_map_center_pixel_x = origin_position_x / map_resolution
fix_map_center_pixel_y = origin_position_y / map_resolution
print("fix_map_center_pixel_x: ", fix_map_center_pixel_x)
print("fix_map_center_pixel_y: ", fix_map_center_pixel_y)
map_center_pixel_x = (origin_width - (origin_width + fix_map_center_pixel_x))
map_center_pixel_y = origin_height + fix_map_center_pixel_y
print("map_center_pixel_x: ", map_center_pixel_x)
print("map_center_pixel_y: ", map_center_pixel_y)


target_positions = [
(105,149),
(105,149),
(104,149),
(104,149),
(104,148),
(104,148),
(104,148),
(104,148),
(104,149),
(104,149),
(104,149),
(104,149),
(104,148),
(104,148),
(104,148),
(103,148),
(103,148),
(103,148),
(103,147),
(102,147),
(102,147),
(101,146),
(101,146),
(101,146),
(101,146),
(99,145),
(97,144),
(97,143),
(96,143),
(97,142),
(96,142),
(97,141),
(97,141),
(96,140),
(96,140),
(96,139),
(96,139),
(95,138),
(95,138),
(95,138),
(94,138),
(94,138),
(94,138),
(94,138),
(94,138),
(93,137),
(93,137),
(93,137),
(92,137),
(91,136),
(91,136),
(90,135),
(90,134),
(89,133),
(88,133),
(87,130),
(86,130),
(86,129),
(85,128),
(84,129),
(83,128),
(83,127),
(83,127),
(82,126),
(82,126),
(82,126),
(82,125),
(81,123),
(81,121),
(80,119),
(80,118),
(79,117),
(77,114),
(76,113),
(75,111),
(74,110),
(74,109),
(74,108),
(74,107),
(73,106),
(73,106),
(73,105),
(72,105),
(71,105),
(71,104),
(69,104),
(68,103),
(67,103),
(66,102),
(66,102),
(65,101),
(65,100),
(64,99),
(64,98),
(64,98),
(63,97),
(63,97),
(63,97),
(62,96),
(62,96),
(61,95),
(60,95),
(59,94),
(59,93),
(58,93),
(56,91),
(56,91),
(55,89),
(55,89),
(55,89),
(54,87),
(53,87),
(53,86),
(53,86),
(53,86),
(53,86),
(54,87),
(54,87),
(54,87),
(54,88),
(55,88),
(55,88),
(55,88),
(55,88),
(55,89),
(55,89),
(56,89),
(56,89),
(56,89),
(56,89),
(56,89),
(56,88),
(56,88),
(55,88),
(55,88),
(55,87),
(55,87),
(55,86),
(54,85),
(54,85),
(54,83),
(54,83),
(54,82),
(54,81),
(54,81),
(54,79),
(54,78),
(55,78),
(55,77),
(55,76),
(55,75),
(55,74),
(55,73),
(54,72),
(54,72),
(54,71),
(54,70),
(54,70),
(53,69),
(53,68),
(53,68),
(53,68),
(53,68),
(53,68),
(54,68),
(54,68),
(54,68),
(54,68),
(54,68),
(53,68),
(53,68),
(54,68),
(54,68),
(54,69),
(54,69),
(54,69),
(54,70),
(54,70),
(54,70),
(55,70),
(55,70),
(55,70),
(55,70),
(55,69),
(55,69),
(57,69),
(58,68),
(59,67),
(59,67),
(60,66),
(61,64),
(62,62),
(62,62),
(63,61),
(63,60),
(63,59),
(64,59),
(64,58),
(64,57),
(64,57),
(64,57),
(63,57),
(63,57),
(63,58),
(62,58),
(62,59),
(61,60),
(61,60),
(61,60),
(61,61),
(61,61),
(62,60),
(63,60),
(63,60),
(64,61),
(64,61),
(64,62),
(65,61),
(65,61),
(65,61),
(65,61),
(66,60),
(67,60),
(67,60),
(68,60),
(68,60),
(69,61),
(70,60),
(70,61),
(71,61),
(71,61),
(72,61),
(72,61),
(74,61),
(75,61),
(76,61),
(77,61),
(78,61),
(79,60),
(80,60),
(81,60),
(83,59),
(84,59),
(84,59),
(86,59),
(87,59),
(89,60),
(90,60),
(91,60),
(92,59),
(93,59),
(94,59),
(96,58),
(97,58),
(99,58),
(100,58),
(101,59),
(103,59),
(104,59),
(105,59),
(107,58),
(109,58),
(110,58),
(111,57),
(112,57),
(114,57),
(115,58),
(116,58),
(117,58),
(119,58),
(120,58),
(122,58),
(123,57),
(124,57),
(125,57),
(126,56),
(127,57),
(129,57),
(130,57),
(131,58),
(132,58),
(133,58),
(134,57),
(135,57)

]

predicted_positions = [
(106,150),
(104,148),
(104,149),
(104,148),
(104,149),
(104,148),
(104,148),
(104,148),
(104,148),
(104,148),
(104,148),
(103,148),
(103,148),
(103,148),
(103,148),
(103,148),
(103,148),
(103,148),
(103,147),
(102,147),
(102,147),
(101,146),
(101,146),
(100,145),
(100,145),
(99,145),
(98,144),
(97,143),
(96,143),
(95,142),
(95,141),
(95,140),
(95,140),
(95,139),
(95,139),
(95,138),
(95,138),
(94,137),
(94,137),
(94,136),
(94,136),
(93,136),
(93,136),
(93,136),
(93,137),
(93,136),
(92,136),
(92,136),
(92,136),
(91,136),
(91,135),
(90,135),
(89,134),
(89,133),
(88,133),
(87,131),
(86,130),
(85,129),
(84,128),
(83,127),
(82,126),
(82,126),
(81,125),
(81,125),
(80,124),
(80,124),
(80,124),
(80,123),
(79,121),
(79,120),
(79,118),
(78,117),
(77,115),
(76,113),
(75,111),
(74,109),
(73,107),
(72,106),
(72,105),
(71,104),
(71,103),
(71,102),
(71,102),
(70,102),
(70,101),
(69,101),
(68,101),
(67,101),
(66,100),
(65,100),
(64,100),
(63,99),
(63,98),
(62,98),
(62,97),
(61,96),
(61,96),
(61,95),
(61,95),
(60,94),
(60,94),
(59,94),
(59,93),
(58,92),
(57,92),
(56,91),
(55,90),
(54,89),
(54,88),
(53,88),
(53,86),
(52,86),
(51,85),
(51,84),
(51,84),
(51,84),
(51,84),
(52,84),
(52,85),
(53,86),
(53,86),
(54,87),
(54,87),
(54,87),
(55,88),
(55,88),
(55,88),
(55,89),
(56,89),
(56,89),
(56,89),
(56,89),
(56,88),
(56,88),
(55,88),
(55,87),
(55,87),
(55,86),
(54,85),
(54,85),
(54,84),
(53,83),
(53,82),
(53,81),
(53,80),
(53,79),
(53,78),
(54,77),
(54,76),
(54,75),
(54,74),
(54,73),
(55,72),
(54,71),
(54,70),
(54,69),
(54,69),
(54,68),
(53,67),
(53,67),
(53,66),
(52,66),
(52,66),
(52,66),
(53,66),
(53,66),
(53,66),
(53,66),
(53,67),
(53,67),
(53,67),
(53,67),
(53,67),
(53,68),
(54,68),
(53,68),
(54,69),
(54,69),
(54,69),
(54,70),
(54,70),
(54,70),
(55,70),
(55,70),
(55,69),
(55,69),
(56,69),
(57,68),
(58,67),
(59,66),
(60,65),
(61,63),
(62,62),
(63,61),
(63,60),
(64,58),
(64,58),
(64,57),
(65,56),
(65,55),
(65,55),
(64,54),
(64,54),
(64,55),
(63,55),
(62,56),
(62,57),
(61,58),
(61,59),
(60,59),
(60,60),
(60,60),
(61,60),
(61,60),
(62,60),
(63,61),
(63,61),
(64,61),
(64,61),
(65,61),
(65,61),
(65,61),
(66,60),
(67,60),
(67,60),
(68,60),
(68,60),
(69,60),
(70,60),
(70,60),
(71,60),
(72,60),
(72,60),
(73,61),
(74,61),
(75,61),
(76,61),
(78,61),
(79,60),
(80,60),
(81,60),
(82,59),
(84,59),
(85,59),
(86,58),
(87,58),
(89,59),
(90,59),
(91,59),
(92,59),
(94,59),
(95,59),
(96,58),
(97,58),
(99,58),
(100,57),
(101,58),
(103,58),
(104,58),
(106,58),
(107,58),
(109,58),
(110,58),
(112,57),
(113,57),
(114,57),
(116,57),
(117,57),
(118,57),
(119,57),
(121,57),
(122,57),
(123,57),
(125,57),
(126,57),
(127,56),
(128,56),
(129,56),
(130,56),
(131,57),
(132,57),
(133,57),
(134,57),
(135,57)

]
for pt in target_positions:
    cv2.circle(img, pt, 1, color=(0, 0, 255), thickness=1)

# for i in range(len(target_positions) - 1):
#     cv2.line(img, target_positions[i], target_positions[i+1],
#              color=(255, 255, 0), thickness=1)

for pt in predicted_positions:
    cv2.circle(img, pt, 1, color=(255, 0, 0), thickness=1)

# for i in range(len(predicted_positions) - 1):
#     cv2.line(
#         img, predicted_positions[i], predicted_positions[i+1], color=(255, 0, 0), thickness=1)

dsize = (int(2.0 * origin_width),
         int(2.0 * origin_height))
img = cv2.resize(img, dsize)

while(True):
    cv2.imshow("Img", img)
    key = cv2.waitKey(1)

    if key & 0xFF == ord('q'):
        break
    elif key == ord('s'):
        print("save")
        # cv2.imwrite(filename="origin_map_v3_result2_target.png", img=img)  # 紅色點
        cv2.imwrite(filename="origin_map_v3_result2_predict.png",
                    img=img)  # 藍色點

cv2.destroyAllWindows()
